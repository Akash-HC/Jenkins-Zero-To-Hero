pipeline {
    agent {
        docker {
            image 'akashhc55/cicd-project:v1'
            args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // Mount Docker socket for host access
        }
    }

    environment {
        DOCKER_IMAGE = "akashhc55/cicd-project:${BUILD_NUMBER}"
        YAML_FILE = "test-poc-2/deployment.yaml"
    }

    stages {
        stage('Checkout') {
            steps {
                echo '‚úÖ Checkout stage started...'
                // git branch: 'main', url: 'https://github.com/Akash-HC/Jenkins-reference.git'
                sh 'echo "Project checkout placeholder (uncomment Git step to activate)"'
            }
        }

        stage('Build and Test') {
            steps {
                echo 'üîß Building and testing the project...'
                sh 'ls -ltr'
                sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                echo "üê≥ Building Docker image: ${DOCKER_IMAGE}"

                withCredentials([usernamePassword(
                    credentialsId: 'docker-hub-creds',
                    usernameVariable: 'DOCKER_USER',
                    passwordVariable: 'DOCKER_PASS'
                )]) {
                    script {
                        sh '''
                            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                            docker build -t ${DOCKER_IMAGE} .
                        '''

                        echo "üîê Logging in to Docker Hub and pushing image..."
                        sh '''
                            echo "$DOCKER_PASS" | docker login -u "$DOCKER_USER" --password-stdin
                            docker push ${DOCKER_IMAGE}
                            docker logout
                        '''
                    }
                }
            }
        }

        stage('Update Kubernetes Manifests') {
            steps {
                echo 'üì¶ Cloning ArgoCD repo and updating deployment manifest...'

                withCredentials([usernamePassword(
                    credentialsId: 'git-creds-id',
                    usernameVariable: 'GIT_USERNAME',
                    passwordVariable: 'GIT_PASSWORD'
                )]) {
                    script {
                        // Clean up and clone Argo repo
                        if (fileExists('argo-repo')) {
                            sh 'rm -rf argo-repo'
                        }
                        sh '''
                            git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/Akash-HC/ArgoCD-Test.git argo-repo
                        '''
                    }

                    dir('argo-repo') {
                        script {
                            def content = readFile(file: "${env.YAML_FILE}")
                            def updated = content.replaceAll("image: .*", "image: ${env.DOCKER_IMAGE}")
                            writeFile(file: "${env.YAML_FILE}", text: updated)

                            sh '''
                                git config user.email "akashchalkodu@gmail.com"
                                git config user.name "Akash-HC"
                                git add ${YAML_FILE}
                                git diff --cached --quiet || git commit -m "Update image to ${DOCKER_IMAGE}"
                                git push origin main
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        failure {
            echo "‚ùå Pipeline failed. Please check the logs for issues."
        }
        success {
            echo "‚úÖ Pipeline completed successfully! Image pushed: ${DOCKER_IMAGE}"
        }
    }
}
